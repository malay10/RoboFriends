{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/SearchBox.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","console","log","length","textAlign","margin","marginTop","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAceA,EAXH,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAEvB,OACI,yBAAKC,UAAU,oDACf,yBAAKC,IAAG,+BAA2BF,EAA3B,YAAyCG,IAAG,UAAKL,EAAL,aACpD,4BAAKA,GACL,2BAAIC,KCSGK,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OAAS,iCACDA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAS,kBAAE,EAAF,CAAOC,IAAQD,EACpBR,GAAOK,EAAOG,GAAGR,GACjBF,KAASO,EAAOG,GAAGV,KACnBC,MAAUM,EAAOG,GAAGT,WAL3B,MCKEW,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCWJC,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACA,yBAAKjB,UAAW,OACZ,2BACAA,UAAU,mCACVkB,KAAM,SACNC,YAAY,gBACZC,SAAWH,MCgBJI,E,kDArBX,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,uDAGAG,KAAKhB,MAAMK,a,GAlBHa,aCyDZC,G,wDAjDX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SARzC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAY,IAJP,E,gEAcO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAKjC,IAAD,EAC0Bb,KAAKJ,MAA5BlB,EADH,EACGA,OAAQ4B,EADX,EACWA,YACTQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGzD,OADAE,QAAQC,IAAIN,GACRpC,EAAO2C,OAQP,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OAX1B,yBAAK7B,MAAO,CAACqC,UAAU,SAAUC,OAAQ,SAAUC,UAAW,SAC1D,4C,GAhCFC,IAAMvB,YCGJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLqB,QAAQrB,MAAMA,EAAM2C,a","file":"static/js/main.7ac18916.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Destructuring props.\r\nconst Card =({name, email, id}) =>{\r\n    \r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img src= {`https://robohash.org/${id}?200x200`} alt={`${name}-robots`} />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return ( <div> {\r\n            robots.map((user, i) => {\r\n                return ( < Card key = { i }\r\n                    id = { robots[i].id }\r\n                    name = { robots[i].name }\r\n                    email = { robots[i].email }\r\n                    />\r\n                );\r\n            })\r\n        } </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n    <div className= \"pa2\" >\r\n        <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\" \r\n        type= 'search'\r\n        placeholder='search robots'\r\n        onChange ={searchChange}\r\n        />\r\n    </div>\r\n    );\r\n   \r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. This is not good</h1>\r\n        }\r\n        else{\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\n// import {robots} from './robot';\r\nimport Scroll from '../Components/Scroll';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField:''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        //console.log(event.target.value);\r\n        this.setState({searchField: event.target.value})\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({robots: users})\r\n        );\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {robots, searchField} = this.state;\r\n        const filteredRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());   \r\n        });\r\n        console.log(filteredRobots);\r\n        if(!robots.length){\r\n            return (\r\n                <div style={{textAlign:'center', margin: '0 auto', marginTop: '5rem'}}>\r\n                    <h1>Loading</h1>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"tc\"> \r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\n// import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robot';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}